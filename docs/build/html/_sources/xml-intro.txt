
.. _xml:

I. Коротко об XML
===================


Введение в XML
------------------

XML ( *англ.* eXtensible Markup Language) — расширяемый язык разметки,
предназначенный для хранения и передачи данных.

Простейший XML-документ выглядит следующим образом:

.. code-block:: xml

    <?xml version="1.0" encoding="windows-1251"?>
    <book category="WEB">
       <title lang="en">Learning XML</title>
       <author>Erik T. Ray</author>
       <year>2003</year>
       <price></price>
    </book>

Первая строка — это XML декларация. Здесь определяется версия XML (1.0) и кодировка файла. На следующей строке описывается корневой элемент документа ``<book>`` ( *открывающий тег* ). Следующие 4 строки описывают дочерние элементы корневого элемента ( ``title``, ``author``, ``year``, ``price``). Последняя строка определяет конец корневого элемента ``</book>`` (*закрывающий тег*).

Документ XML состоит из *элементов* (elements). Элемент начинается *открывающим тегом* (start-tag) в угловых скобках, затем идет *содержимое* (content) элемента, после него записывается *закрывающий тег* (end-teg) в угловых скобках.

Информация, заключенная между тегами, называется содержимым или значением элемента: ``<author>Erik T. Ray</author>``. Т.е. элемент ``author`` принимает значение ``Erik T. Ray``. Элементы могут вообще не принимать значения.

Элементы могут содержать *атрибуты*, так, например, открывающий тег ``<title lang="en">`` имеет атрибут ``lang``, который принимает значение ``en``. Значения атрибутов заключаются в кавычки (двойные или ординарные).

Некоторые элементы, не содержащие значений, допустимо записывать без закрывающего тега. В таком случае символ ``/`` ставится в конце открывающего тега:

.. code-block:: xml

    <name first="Иван" second="Петрович" />

Структура XML
-----------------------

XML документ должен содержать корневой элемент. Этот элемент является «родительским» для всех других элементов.

Все элементы в XML документе формируют иерархическое дерево. Это дерево начинается с корневого элемента и разветвляется на более низкие уровни элементов.

Все элементы могут иметь подэлементы (дочерние элементы):

.. code-block:: xml

    <корневой>
       <потомок>
         <подпотомок>.....</подпотомок>
       </потомок>
    </корневой>


Правила синтаксиса (Валидность)
-------------------------------------

Структура XML документа должна соответствовать определенным правилам.
XML документ отвечающий этим правилам называется *валидным* (*англ.*
Valid — правильный) или *синтаксически верным*. Соответственно, если
документ не отвечает правилам, он является *невалидным* .

Основные правила синтаксиса XML:

1) Теги XML регистрозависимы — теги XML являются регистрозависимыми. Так, тег ``<Letter>`` не то же самое, что тег ``<letter>``.

Открывающий и закрывающий теги должны определяться в одном регистре:

.. code-block:: xml

    <Message>Это неправильно</message>
    <message>Это правильно</message>

2) XML элементы должны соблюдать корректную вложенность:

.. code-block:: xml

    <b><i>Некорректная вложенность</b></i>
    <b><i>Корректная вложенность</i></b>

.. _parrent-tag:

3) У XML документа должен быть корневой элемент — XML документ должен
содержать один элемент, который будет родительским для всех других
элементов. Он называется корневым элементом.

В большинстве XML файлов отчетов для :abbr:`ФНС (Федеральная налоговая служба)` корневым элементом является ``<Файл></Файл>``. После закрывающего тега ``</Файл>`` больше ничего не должно быть.

4) Значения XML атрибутов должны заключаться в кавычки:

.. code-block:: xml

    <note date="12/11/2007">Корректная запись</note>
    <note date=12/11/2007>Некорреткная запись</note>

.. _essence:

Сущности
---------------------------------------

Некоторые символы в XML имеют особые значения. Если вы поместите,
например, символ ``<`` внутри XML элемента, то будет
сгенерирована ошибка, так как парсер интерпретирует его, как начало
нового элемента.

Чтобы такая ошибка не возникала, нужно заменить символ ``<`` на его
сущность. В XML существует 5 предопределенных сущностей:

.. _xml-valid:

.. csv-table:: Таблица I.1 — Сущности
   :header: Сущность, Символ, Значение
   :widths: 20, 20, 60

    ``&lt;``, ``<``, "меньше, чем"
    ``&gt;``, ``>``, "больше, чем"
    ``&amp;``, ``&``, "амперсанд"
    ``&apos;``, ``'``, "апостроф"
    ``&quot;``, ``"``, "кавычки"

.. note:: Только символы ``<`` и ``&`` строго запрещены в XML. Символ ``>`` допустим, но лучше его всегда заменять на сущность.


Поиск информации в XML файлах (XPath)
-----------------------------------------

.. index:: XPath

XPath ( *англ.* XML Path Language) — язык запросов к элементам
XML-документа. XPath расширяет возможности работы с XML.

XML имеет древовидную структуру. В документе всегда имеется корневой
элемент (инструкция ``<?xml version=”1.0”?>`` к дереву отношения не имеет).
У элемента дерева всегда существуют потомки и предки, кроме корневого
элемента, у которого предков нет, а также тупиковых элементов (листьев
дерева), у которых нет потомков. Каждый элемент дерева находится на
определенном уровне вложенности (далее — «уровень»). У элементов на
одном уровне бывают предыдущие и следующие элементы.

Это очень похоже на организацию каталогов в файловой системе, и строки
XPath, фактически, — пути к «файлам» — элементам. Рассмотрим пример
списка книг:

.. code-block:: xml

    <?xml version="1.0" encoding="windows-1251"?>
    <bookstore>
       <book category="COOKING">
         <title lang="it">Everyday Italian</title>
         <author>Giada De Laurentiis</author>
         <year>2005</year>
         <price>30.00</price>
       </book>
       <book category="CHILDREN">
         <title lang="en">Harry Potter</title>
         <author>J K. Rowling</author>
         <year>2005</year>
         <price>29.99</price>
       </book>
       <book category="WEB">
         <title lang="en">Learning XML</title>
         <author>Erik T. Ray</author>
         <year>2003</year>
         <price>39.95</price>
       </book>
    </bookstore>

XPath запрос ``/bookstore/book/price`` вернет следующий результат:

.. code-block:: xml

    <price>30.00</price>
    <price>29.99</price>
    <price>39.95</price>

Сокращенная форма этого запроса выглядит так: ``//price``.

С помощью XPath запросов можно искать информацию по атрибутам. Например,
можно найти информацию о книге на итальянском языке: ``//title[@lang="it"]`` вернет ``<title lang="it">Everyday Italian</title>``.

Чтобы получить больше информации, необходимо модифицировать запрос ``//book[title[@lang="it"]]`` вернет:

.. code-block:: xml

    <book category="COOKING">
         <title lang="it">Everyday Italian</title>
         <author>Giada De Laurentiis</author>
         <year>2005</year>
         <price>30.00</price>
       </book>

В приведенной ниже таблице представлены некоторые выражения XPath и
результат их работы:

.. csv-table:: Таблица I.2 — Выражения XPath
   :header: Выражение XPath, Результат
   :widths: 40, 60

   ``/bookstore/book[1]``, "Выбирает первый элемент ``book``, который является потомком элемента ``bookstore``"
   ``/bookstore/book[position()<3]``, "Выбирает первые два элемента ``book``, которые являются потомками элемента ``bookstore``"
   ``//title[@lang]``, "Выбирает все элементы ``title`` с атрибутом ``lang``"
   ``//title[@lang=’en’]``, "Выбирает все элементы ``title`` с атрибутом ``lang``, который имеет значение ``en``"
   ``/bookstore/book[price>35.00]``, "Выбирает все элементы ``book``, которые являются потомками элемента bookstore и которые содержать элемент ``price`` со значением больше ``35.00``"
   ``/bookstore/book[price>35.00]/title``, "Выбирает все элементы ``title`` элементов book элементов ``bookstore``, которые содержать элемент ``price`` со значением больше ``35.00``"

Кодировки
--------------

И еще один важный момент, который стоит рассмотреть — кодировки. Существует множество кодировок, о них подробнее можно прочитать в статье `Набор
символов <https://ru.wikipedia.org/wiki/%D0%9D%D0%B0%D0%B1%D0%BE%D1%80_%D1%81%D0%B8%D0%BC%D0%B2%D0%BE%D0%BB%D0%BE%D0%B2>`__.

Самыми распространенными кириллическими кодировками являются ``Windows-1251`` и ``UTF-8``. Последняя является одним из стандартов, но большая часть ФНС отчетности имеет кодировку ``Windows-1251``.

В XML файле кодировка объявляется в декларации:

.. code-block:: xml

    <?xml version="1.0" encoding="windows-1251"?>

Часто можно столкнуться с ситуацией, когда текстовый редаткор некорректно распознает кодировку и отображает кракозябры. В такой случае, необходимо выбрать кодировку вручную, для этого выполните:

.. csv-table:: Таблица I.3 — Смена кодировки в разных программах
   :header: Программа, Кодировка
   :widths: 40, 60

    Notepad++, "*«Документ → Кодировка»*"
    Geany, "*«Документ → Установить кодировку»*"
    Firefox, "*«Вид → Кодировка»*"
    Chrome, "*«Настройка → Дополнительные инструменты → Кодировка»*"

.. note:: В большинстве случаев при работе с русскоязычными файлами помогает переключение кодировки на ``Windows-1251`` или ``UTF-8``. Если все равно не удается прочитать содержимое XML документа, стоит открыть его в Mozilla Firefox, он отлично распознает кодировки.

 Если ничего не помогает, вполне возможно, что файл был поврежден.